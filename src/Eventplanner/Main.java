package Eventplanner;  // Paquete principal para ejecutar la aplicaci√≥n EventPlanner

import Eventplanner.Priority; // Importa la clase Priority para gestionar las prioridades de los eventos.
import java.time.LocalDate; // Importa LocalDate para manejar fechas en formato (yyyy-MM-dd).
import java.time.format.DateTimeFormatter; //  Importa DateTimeFormatter para definir el formato de la fehca al leer.
import java.util.Scanner; // Importa Scanner para leer datos desde la consola.
import java.util.ArrayList; // Importa ArrayList para almacenar din√°micamente los objetos de eventos en una lista.

/**
 * Clase principal que maneja el flujo de la aplicaci√≥n EventPlanner.
 * El usuario puede interactuar con los eventos y las tareas asociadas a trav√©s de un men√∫ interactivo.
 * Esta clase contiene el m√©todo principal que ejecuta el men√∫ y las interacciones del usuario.
 */
public class Main {

    private static ArrayList<Event> eventList = new ArrayList<>(); // Lista para almacenar los eventos.

    /**
     * El m√©todo principal que ejecuta el programa y muestra el men√∫ interactivo.
     * Dependiendo de la opci√≥n selleccionada por el usuario, se llamar√°n diferentes m√©todos
     * para manejar eventos y tareas.
     */
    public static void main(String[]args) {
        // Creamos un objeto Scanner para leer entradas del usuario.
        Scanner input = new Scanner(System.in);

        // Definimos el formato de la fecha, el cual ser√° 'yyyy-MM-dd'.
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        //Variable para almacenar la opci√≥n seleccionada por el usuario
        int opcion; // Variable para almacenar la opci√≥n seleccionada por el usuario.

        // Bucle do-while que continuar√° mostrando el men√∫ hasta que el usuario elija salir.
        do {
            // Mostrar opciones del men√∫.
            System.out.println("Bienvenido a Event Planner. Seleccione una opci√≥n: ");
            System.out.println("[1] A√±adir evento üóìÔ∏è");
            System.out.println("[2] Borrar evento üóëÔ∏è");
            System.out.println("[3] Listar eventos üóíÔ∏è");
            System.out.println("[4] Marcar/desmarcar tarea de un evento como completada  ‚úÖ ‚ùå");
            System.out.println("[5] Salir üö™");

            // Leemos la opci√≥n seleccionada por el usuario.
            System.out.println("Elige una opci√≥n: ");
            opcion = input.nextInt();
            input.nextLine(); // Limpiamos el buffer para evitar problemas con entradas posteriores.

            // Imprimir la opci√≥n seleccionada.
            System.out.println("Opci√≥n seleccionada: " + opcion);

            // Procesamos la opci√≥n seleccionada por el usuario.
            switch (opcion) {
                case 1:
                    // Llamamos al m√©todo para a√±adir eventos.
                    System.out.println("A√±adir evento");

                    // Pedimos al usuario que ingrese los datos del evento.
                    System.out.println("Introduce el t√≠tulo del evento: ");
                    String titulo = input.nextLine(); // Leemos el t√≠tulo del evento.

                    // Declaramos la variable fechaStr para almacenar la fecha ingresada por el usuario.
                    String fechaStr;

                    // Pedimos la fecha del evento en formato yyyy-MM-dd.
                    System.out.println("Introduce la fecha del evento (formato YYYY-MM-DD): ");
                    fechaStr = input.nextLine(); // Leemos la fecha ingresada por el usuario.

                    // Intentamos convertir la fecha ingresada a un objeto Localdate.
                    LocalDate fecha = null;
                    while (fecha == null) {
                        try {
                            fecha = LocalDate.parse(fechaStr, DateTimeFormatter.ofPattern("yyyy-MM-dd")); // Convertimos la fecha a LocalDate.
                        } catch (Exception e) {
                            System.out.println("La fecha ingresada es inv√°lida. Por favor, usa el formato correcto (YYYY-MM-DD).");
                            System.out.println("Introduce nuevamente la fecha del evento: ");
                            fechaStr = input.nextLine(); // Volvemos a pedir la fecha.
                        }
                    }

                    // Pedimos la prioridad del evento.
                    System.out.println("Introduce la prioridad del evento (HIGH, MEDIUM,LOW): ");
                    String prioridad = input.nextLine(); // Leemos la prioridad.

                    //Creamos el nuevo evento.
                    Event nuevoEvento = new Event(titulo, fecha, Priority.valueOf(prioridad.toUpperCase()));
                    eventList.add(nuevoEvento);

                    // Confirmamos que el evento ha sido a√±adido.
                    System.out.println("Evento a√±adido: " + nuevoEvento);
                    break;

                case 2:
                    // Aqu√≠ llamaremos al m√©todo para borrar eventos.
                    System.out.println("Borrar evento");


                    // Verificamos si la lista de eventos est√° vacia.
                    if (eventList.isEmpty()) {
                        System.out.println("No hay eventos para eliminar");
                    } else {
                        // Mostramos los eventos disponibles para que el usuario elija uno a eliminar.
                        System.out.println("Eventos disponibles para eliminar:");

                        // Iteramos sobre la lista de eventos y los mostramos al usuario con un n√∫mero.
                        // Esto ayuda a que el usuario elimine facilmente el evento.
                        for (int i = 0; i < eventList.size(); i++) {
                            System.out.println(i + 1 + ". " + eventList.get(i)); // Mostramos el evento con su n√∫mero.
                        }

                        // Pedimos al usuario que ingrese el n√∫mero del evento que desea eliminar.
                        // Este n√∫mero se usar√° para identificar y eliminar el evento de la lista.
                        System.out.println("Introduce el n√∫mero del evento que deseas eliminar: ");
                        int eventToRemove = input.nextInt(); // Leemos la opci√≥n del evento a eliminar.
                        input.nextLine(); // Limpiamos el buffer para evitar problemas con entradas posteriores.

                        // Verificamos que el n√∫mero ingresado sea v√°lido.
                        // Si el n√∫mero es v√°lido, eliminamos el evento de la lista.
                        if (eventToRemove > 0 && eventToRemove <= eventList.size()) {
                            // Eliminamos el evento de la lista utilizando el √≠ndice (restamos 1 porque las listas empiezan en 0).
                            eventList.remove (eventToRemove -1);
                            System.out.println("Evento eliminado"); // Confirmamos que el evento fue eliminado.
                        } else {
                            // Si el n√∫mero no es v√°lido, mostramos un mensaje de error.
                            System.out.println("N√∫mero de evento inv√°lido.");
                        }
                    }
                    break;

                case 3:
                    // Aqu√≠ llamaremos al m√©todo para listar eventos.
                    System.out.println("Listar eventos");
                    for (Event evento : eventList) {
                        System.out.println(evento); // El m√©todo toString() de la clase Event se encargar√° de mostrar el evento.
                    }
                    break;

                case 4:
                    // Aqu√≠ llamaremos al m√©todo para marcar o desmarcar una tarea de un evento
                    System.out.println("Marcar/desmarcar tarea de evento");
                    break;

                case 5:
                    // Aqu√≠ si el usuario elige salir, terminamos el programa.
                    System.out.println("Saliendo...");
                    break;

                default:
                    // En caso de que el usuario ingrese una opci√≥n no v√°lida.
                    System.out.println("Opci√≥n no v√°lida");

            }
        } while (opcion !=5); // Continuar mostrando el men√∫ mientas la opci√≥n no sea 5.

        input.close(); // Cerramos el objeto Scanner al finalizar el programa.
    }
}
